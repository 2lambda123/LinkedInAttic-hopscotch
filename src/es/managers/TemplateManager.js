/**
 * Private registry of templates known to TemplateManager.
 * @private
 */
let _templates = {};

/**
 * Maintains registry of Hopscotch callout templates and renders markup for
 * callouts using the requested template.
 */
export default class TemplateManager {
  /**
   * Render callout markup using the rendering method and data provided.
   *
   * @param {String|Function} renderer - The rendering method to use. If a function,
   *                                     that method will be used directly to render.
   *                                     Otherwise, this will look for a registered
   *                                     template with the given name.
   * @param {Object} data              - The data with which to render the template.
   *                                     This data is passed verbatim to the rendering
   *                                     method.
   * @returns {String} The rendered HTML as generated by renderer and data.
   */
  static render(renderer, data) {
    let renderFunc;

    if (typeof renderer === 'function') {
      renderFunc = renderer;
    } else if (typeof renderer === 'string' && typeof _templates[renderer] === 'function') {
      renderFunc = _templates[renderer];
    } else {
      throw new Error('Callout rendering failed - template "' + renderer + '" is not a function.');
    }
    return renderFunc(data);
  }

  /**
   * Registers a template with the manager's internal registry. These templates
   * can later be referenced in configurations by the id provided.
	 *
	 * @param {String} id   - The ID of the template. Can be used later to reference
	 *                        in callout and tour configurations.
	 * @param {Function} tl - The cooresponding template function to build HTML.
   */
  static registerTemplate(id, tl){
    if(typeof id === 'string' && typeof tl === 'function'){
      _templates[id] = tl;
    }
  }
}